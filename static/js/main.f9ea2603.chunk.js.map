{"version":3,"sources":["components/modal.component.jsx","components/edititem.component.jsx","components/groceryitem.component.jsx","components/grocerylist.component.jsx","components/additem.component.jsx","pages/groceries.page.jsx","App.js","reportWebVitals.js","graphql/resolvers.js","graphql/item.utils.js","index.js"],"names":["rand","Math","round","random","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","SimpleModal","props","OpenModal","BodyModal","classes","React","useState","modalStyle","open","setOpen","body","style","className","onClick","Modal","onClose","aria-labelledby","aria-describedby","GET_SHOPS","gql","EDIT_ITEM","EditItem","id","name","shop","useMutation","editItem","data","useQuery","editeditem","setEditeditem","selected","setSelected","useEffect","console","log","map","value","label","options","shops","onSubmit","event","selecteditems","length","variables","_id","shopID","selectedshop","then","window","location","reload","alert","preventDefault","Grid","container","item","xs","sm","TextField","required","fullWidth","autoComplete","onChange","target","labelledBy","Button","variant","color","type","DELETE_ITEM","UPDATE_COMPLETED","UPDATE_ORDERED","GroceryItem","completed","ordered","deleteItem","updateCompletedItem","updateOrderedItem","checked","setChecked","labelId","ListItem","role","undefined","dense","button","currentIndex","indexOf","newChecked","push","splice","ListItemIcon","Checkbox","edge","tabIndex","disableRipple","inputProps","IconButton","aria-label","ListItemText","fontWeight","textDecoration","primary","ListItemSecondaryAction","confirm","root","maxWidth","GroceryList","items","List","Card","Container","key","ADD_ITEM","AddItem","addItem_API","newitem","setNewitem","GET_ITEMS","Groceries","filterData","existingshop","setDataItems","filter","loading","error","dataShops","localStorage","getItem","selectedShop","setSelectedShop","dataItems","paddingTop","Paper","Select","setItem","MenuItem","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","typeDefs","resolvers","Mutation","addItem","_root","cache","newItems","itemToAdd","find","utils_addItems","readQuery","query","writeQuery","httpLink","createHttpLink","uri","InMemoryCache","client","ApolloClient","link","res","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f9ea2603.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\n\r\nfunction rand() {\r\n  return Math.round(Math.random() * 20) - 10;\r\n}\r\n\r\nfunction getModalStyle() {\r\n  const top = 50 + rand();\r\n  const left = 50 + rand();\r\n\r\n  return {\r\n    top: `${top}%`,\r\n    left: `${left}%`,\r\n    transform: `translate(-${top}%, -${left}%)`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: \"absolute\",\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nexport default function SimpleModal({ OpenModal, BodyModal }, props) {\r\n  const classes = useStyles();\r\n\r\n  const [modalStyle] = React.useState(getModalStyle);\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const body = (\r\n    <div style={modalStyle} className={classes.paper}>      \r\n      {BodyModal}     \r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <span onClick={handleOpen}>{OpenModal}</span>\r\n      {/* <button type=\"button\" onClick={handleOpen}>\r\n        Open Modal\r\n      </button> */}\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"simple-modal-title\"\r\n        aria-describedby=\"simple-modal-description\"\r\n      >          \r\n        \r\n        {body}\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\r\nimport MultiSelect from \"react-multi-select-component\";\r\nimport { Button, Grid, TextField } from \"@material-ui/core\";\r\n\r\nconst GET_SHOPS = gql`\r\n  query getShops {\r\n    shops {\r\n      id\r\n      name\r\n\r\n      item {\r\n        id\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst EDIT_ITEM = gql`\r\n  mutation editItem($_id: String!, $name: String!, $shopID: [String]) {\r\n    editItem(_id: $_id, name: $name, shopID: $shopID) {\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function EditItem({ id, name, shop }) {\r\n  const [editItem] = useMutation(EDIT_ITEM);\r\n  const { data } = useQuery(GET_SHOPS);\r\n  const [editeditem, setEditeditem] = useState(\"\");\r\n  const [selected, setSelected] = useState();\r\n\r\n  useEffect(() => {\r\n    setEditeditem(name);\r\n    console.log(shop);\r\n    if (shop) {\r\n      setSelected(shop.map((shop) => ({ value: shop.id, label: shop.name })));\r\n    }\r\n  }, []);\r\n\r\n  const handleChange = (event) => {\r\n    setEditeditem(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    let shoparray = (selecteditems) => {\r\n      return selecteditems.map((selectedshop) => selectedshop.value);\r\n    };\r\n\r\n    if (selected && selected.length > 0) {\r\n      editItem({\r\n        variables: {\r\n          _id: id,\r\n          name: editeditem,\r\n          shopID: shoparray(selected),\r\n        },\r\n      }).then(() => window.location.reload());\r\n\r\n      setEditeditem(\"\");\r\n    } else {\r\n      alert(\"Select a shop\");\r\n    }\r\n\r\n    event.preventDefault();\r\n  };\r\n  const options = data\r\n    ? data.shops.map((shop) => {\r\n        return { label: shop.name, value: shop.id };\r\n      })\r\n    : { label: \"Loading\", value: \"1\" };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Edit Item</h1>\r\n      <form onSubmit={handleSubmit}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} sm={5}>\r\n            <TextField\r\n              value={editeditem}\r\n              required\r\n              id=\"edititem\"\r\n              name=\"edititem\"\r\n              label=\"Edit item\"\r\n              fullWidth\r\n              autoComplete=\"given-name\"\r\n              onChange={handleChange}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <MultiSelect\r\n              options={options}\r\n              value={selected}\r\n              onChange={setSelected}\r\n              labelledBy={\"Select\"}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={3}>\r\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n              Submit\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport LocalShippingIcon from \"@material-ui/icons/LocalShipping\";\r\nimport {\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemSecondaryAction,\r\n  ListItemText,\r\n  Checkbox,\r\n  IconButton,\r\n} from \"@material-ui/core\";\r\nimport gql from \"graphql-tag\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\nimport SimpleModal from \"./modal.component\";\r\nimport EditItem from \"./edititem.component\";\r\n\r\nconst DELETE_ITEM = gql`\r\n  mutation deleteItem($_id: String!) {\r\n    deleteItem(_id: $_id) {\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nconst UPDATE_COMPLETED = gql`\r\n  mutation updateCompletedItem($_id: String!, $completed: Boolean!) {\r\n    updateCompletedItem(_id: $_id, completed: $completed) {\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nconst UPDATE_ORDERED = gql`\r\n  mutation updateOrderedItem($_id: String!, $ordered: Boolean!) {\r\n    updateOrderedItem(_id: $_id, ordered: $ordered) {\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function GroceryItem({ name, id, completed, ordered, shop }) {\r\n  const [deleteItem] = useMutation(DELETE_ITEM);\r\n  const [updateCompletedItem] = useMutation(UPDATE_COMPLETED);\r\n  const [updateOrderedItem] = useMutation(UPDATE_ORDERED);\r\n  const [checked, setChecked] = useState([0]);\r\n\r\n  const deletethisitem = () => {\r\n    const deleteConfirm = window.confirm(\r\n      \"Are you sure you want to delete this item?\"\r\n    );\r\n    if (deleteConfirm) {\r\n      deleteItem({\r\n        variables: {\r\n          _id: id,\r\n        },\r\n      }).then(() => window.location.reload());\r\n    }\r\n  };\r\n\r\n  const markascompleted = () => {\r\n    updateCompletedItem({\r\n      variables: {\r\n        _id: id,\r\n        completed: !completed,\r\n      },\r\n    }).then(() => window.location.reload());\r\n  };\r\n\r\n  const markasordered = () => {\r\n    updateOrderedItem({\r\n      variables: {\r\n        _id: id,\r\n        ordered: !ordered,\r\n      },\r\n    }).then(() => window.location.reload());\r\n  };\r\n\r\n  const handleToggle = (value) => () => {\r\n    const currentIndex = checked.indexOf(value);\r\n    const newChecked = [...checked];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(value);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n\r\n    setChecked(newChecked);\r\n  };\r\n\r\n  const labelId = `checkbox-list-label-${id}`;\r\n\r\n  return (\r\n    <ListItem key={id} role={undefined} dense button onClick={handleToggle(id)}>\r\n      <ListItemIcon>\r\n        <Checkbox\r\n          edge=\"start\"\r\n          checked={checked.indexOf(id) !== -1}\r\n          tabIndex={-1}\r\n          disableRipple\r\n          inputProps={{ \"aria-labelledby\": labelId }}\r\n          onClick={markascompleted}\r\n        />\r\n      </ListItemIcon>\r\n      <span>\r\n        <SimpleModal\r\n          OpenModal={\r\n            <IconButton edge=\"end\" aria-label=\"ordered\">\r\n              <EditIcon />\r\n            </IconButton>\r\n          }\r\n          BodyModal={<EditItem id={id} name={name} shop={shop}></EditItem>}\r\n        ></SimpleModal>\r\n      </span>\r\n      <ListItemText\r\n        style={{\r\n          fontWeight: \"bold\",\r\n          textDecoration: completed || ordered ? \"line-through\" : \"none\",\r\n        }}\r\n        id={labelId}\r\n        primary={name}\r\n      />\r\n      <ListItemSecondaryAction>\r\n        <IconButton onClick={markasordered} edge=\"end\" aria-label=\"ordered\">\r\n          <LocalShippingIcon />\r\n        </IconButton>\r\n        <IconButton onClick={deletethisitem} edge=\"end\" aria-label=\"delete\">\r\n          <DeleteIcon />\r\n        </IconButton>\r\n      </ListItemSecondaryAction>\r\n    </ListItem>\r\n  );\r\n}\r\n","import GroceryItem from \"./groceryitem.component\";\r\nimport { Card, Container } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\n\r\nconst GroceryList = ({ items }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <List className={classes.root}>\r\n      <Card variant=\"outlined\">\r\n        <Container>\r\n          {items.map((item) => {\r\n            return <GroceryItem {...item} key={item.id}></GroceryItem>;\r\n          })}\r\n        </Container>\r\n      </Card>\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default GroceryList;\r\n","import React, { useState } from \"react\";\r\nimport MultiSelect from \"react-multi-select-component\";\r\n// import Shops from \"../mock-db/shop\";\r\nimport { Button, Grid, TextField } from \"@material-ui/core\";\r\nimport gql from \"graphql-tag\";\r\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\r\n\r\nconst ADD_ITEM = gql`\r\n  mutation addItem_API($name: String!, $shopID: [String]) {\r\n    addItem_API(name: $name, shopID: $shopID) {\r\n      id\r\n      name\r\n      shop {\r\n        id\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_SHOPS = gql`\r\n  query getShops {\r\n    shops {\r\n      id\r\n      name\r\n\r\n      item {\r\n        id\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst AddItem = () => {\r\n  const { data } = useQuery(GET_SHOPS);\r\n  const [addItem_API] = useMutation(ADD_ITEM);\r\n  const [newitem, setNewitem] = useState(\"\");\r\n  const [selected, setSelected] = useState();\r\n\r\n  const handleChange = (event) => {\r\n    setNewitem(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    let shoparray = (selecteditems) => {\r\n      return selecteditems.map((selectedshop) => selectedshop.value);\r\n    };\r\n\r\n    if (selected && selected.length > 0) {\r\n      addItem_API({\r\n        variables: {\r\n          name: newitem,\r\n          shopID: shoparray(selected),\r\n        },\r\n      }).then(() => window.location.reload());\r\n\r\n      setNewitem(\"\");\r\n    } else {\r\n      alert(\"Select a shop\");\r\n    }\r\n\r\n    event.preventDefault();\r\n  };\r\n  const options = data\r\n    ? data.shops.map((shop) => {\r\n        return { label: shop.name, value: shop.id };\r\n      })\r\n    : { label: \"Loading\", value: \"1\" };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} sm={5}>\r\n            <TextField\r\n              value={newitem}\r\n              required\r\n              id=\"newitem\"\r\n              name=\"newitem\"\r\n              label=\"Add new item\"\r\n              fullWidth\r\n              autoComplete=\"given-name\"\r\n              onChange={handleChange}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <MultiSelect\r\n              options={options}\r\n              value={selected}\r\n              onChange={setSelected}\r\n              labelledBy={\"Select\"}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={3}>\r\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n              Add item\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddItem;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Paper, Container, Select, MenuItem } from \"@material-ui/core\";\r\nimport GroceryList from \"../components/grocerylist.component\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport gql from \"graphql-tag\";\r\nimport AddItem from \"../components/additem.component\";\r\n\r\nconst GET_ITEMS = gql`\r\n  query getItems {\r\n    items {\r\n      id\r\n      name\r\n      completed\r\n      ordered\r\n      shop {\r\n        id\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_SHOPS = gql`\r\n  query getShops {\r\n    shops {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nconst Groceries = () => {\r\n  const filterData = (value) => {\r\n    if (data && value) {\r\n      let existingshop = null;\r\n      if (value === \"0\") {\r\n        setDataItems(data.items);\r\n      } else {\r\n        setDataItems(\r\n          data.items.filter((item) => {\r\n            if (item.shop) {\r\n              existingshop = item.shop.filter((shop) => shop.id === value);\r\n            }\r\n            return existingshop.length > 0 ? item : null;\r\n          })\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const { data, loading, error } = useQuery(GET_ITEMS);\r\n  const getshops = useQuery(GET_SHOPS);\r\n\r\n  const dataShops = getshops.data;\r\n  const [selectedShop, setSelectedShop] = useState(\r\n    localStorage.getItem(\"selectedshop\")\r\n      ? localStorage.getItem(\"selectedshop\")\r\n      : \"\"\r\n  );\r\n\r\n  let [dataItems, setDataItems] = useState();\r\n  useEffect(() => {\r\n    filterData(\r\n      localStorage.getItem(\"selectedshop\")\r\n        ? localStorage.getItem(\"selectedshop\")\r\n        : null\r\n    );\r\n    // eslint-disable-next-line\r\n  }, [data]);\r\n\r\n  if (loading) return <p>loading...</p>;\r\n  if (error) return <p>ERROR</p>;\r\n  if (!data) return <p>Not found</p>;\r\n\r\n  if (data && !dataItems) {\r\n    setDataItems(data.items);\r\n  }\r\n\r\n  const handleChange = (event) => {\r\n    setSelectedShop(event.target.value);\r\n    localStorage.setItem(\"selectedshop\", event.target.value);\r\n    filterData(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div style={{ paddingTop: \"5%\" }}>\r\n      <Container>\r\n        <Paper>\r\n          <Select\r\n            labelId=\"select-label\"\r\n            id=\"select\"\r\n            value={selectedShop}\r\n            onChange={handleChange}\r\n          >\r\n            <MenuItem value=\"0\">All</MenuItem>\r\n            {dataShops ? (\r\n              dataShops.shops.map((shop) => (\r\n                <MenuItem key={shop.id} value={shop.id}>\r\n                  {shop.name}\r\n                </MenuItem>\r\n              ))\r\n            ) : (\r\n              <MenuItem value={1}>Loading</MenuItem>\r\n            )}\r\n          </Select>\r\n          <Container>\r\n            <AddItem></AddItem>\r\n            <h1>ITEMS</h1>\r\n            <GroceryList\r\n              items={\r\n                dataItems\r\n                  ? dataItems.filter((item) => !item.completed && !item.ordered)\r\n                  : dataItems\r\n              }\r\n            ></GroceryList>\r\n          </Container>\r\n\r\n          <h1>ORDERED ITEMS</h1>\r\n          <GroceryList\r\n            items={\r\n              dataItems ? dataItems.filter((item) => item.ordered && !item.completed) : dataItems\r\n            }\r\n          ></GroceryList>\r\n          <h1>DONE ITEMS</h1>\r\n          <GroceryList\r\n            items={\r\n              dataItems ? dataItems.filter((item) => item.completed) : dataItems\r\n            }\r\n          ></GroceryList>\r\n        </Paper>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Groceries;\r\n","//import './App.css';\nimport Groceries from './pages/groceries.page';\n\n\nfunction App() {  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Groceries></Groceries>  \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { gql } from \"apollo-boost\";\r\nimport { utils_addItems } from \"./item.utils\";\r\n\r\n\r\nexport const typeDefs = gql `\r\n    extend type Mutation {\r\n        AddItem(item: Item!): [Item]\r\n    }\r\n`;\r\n\r\nconst GET_ITEMS = gql`\r\n  {\r\n    items @client\r\n  }\r\n`;\r\n\r\nexport const resolvers = {\r\n    Mutation: {     \r\n      addItem: (_root, { item }, { cache }) => {\r\n        const { items } = cache.readQuery({\r\n          query: GET_ITEMS\r\n        });\r\n  \r\n        const newItems = utils_addItems(items, item);\r\n        cache.writeQuery({\r\n          query: GET_ITEMS,\r\n          data: { items: newItems }\r\n        });\r\n  \r\n        return newItems;\r\n      }\r\n    }\r\n  };","export const utils_addItems = (items, itemToAdd) => {    \r\n    const existingItem = items.find(\r\n        item=> item.name === itemToAdd.name\r\n    );\r\n\r\n    if(existingItem){        \r\n        console.log(\"Item is already added\")\r\n        return items;        \r\n    }\r\n    return [...items, itemToAdd];\r\n\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport {ApolloProvider} from 'react-apollo';\r\nimport {createHttpLink} from 'apollo-link-http';\r\nimport {InMemoryCache} from 'apollo-cache-inmemory';\r\nimport {ApolloClient, gql} from 'apollo-boost';\r\n\r\nimport {resolvers, typeDefs} from './graphql/resolvers';\r\n\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: process.env.NODE_ENV===\"development\"? 'http://localhost:4000/graphql':'https://grocery-list-louise.herokuapp.com/graphql'\r\n  \r\n});\r\n\r\nconst cache = new InMemoryCache();\r\n\r\nconst client = new ApolloClient({\r\n  link: httpLink,\r\n  cache, \r\n  typeDefs,\r\n  resolvers\r\n});\r\n\r\n// client.writeData({\r\n//   data: {\r\n//     items: []\r\n//   }\r\n// })\r\nclient.query({\r\n  query: gql`\r\n  {\r\n    \r\n      items\r\n      {\r\n        id\r\n        name    \r\n        shop{\r\n          id\r\n          name      \r\n        }\r\n      }\r\n    \r\n  }\r\n  `\r\n}).then(res => null);\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client = {client}>    \r\n    <App />  \r\n  </ApolloProvider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}