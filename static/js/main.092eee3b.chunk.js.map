{"version":3,"sources":["components/groceryitem.component.jsx","components/grocerylist.component.jsx","components/additem.component.jsx","pages/groceries.page.jsx","App.js","reportWebVitals.js","graphql/resolvers.js","graphql/item.utils.js","index.js"],"names":["DELETE_ITEM","gql","GroceryItem","value","name","id","shop","useMutation","deleteItem","useState","checked","setChecked","deletethisitem","variables","_id","then","window","location","reload","labelId","ListItem","role","undefined","dense","button","onClick","currentIndex","indexOf","newChecked","push","splice","ListItemIcon","Checkbox","edge","tabIndex","disableRipple","inputProps","ListItemText","style","fontWeight","color","primary","map","key","ListItemSecondaryAction","IconButton","aria-label","useStyles","makeStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","GroceryList","items","classes","List","className","Card","variant","Container","item","ADD_ITEM","GET_SHOPS","AddItem","data","useQuery","addItem_API","newitem","setNewitem","label","selected","setSelected","options","shops","onSubmit","event","selecteditems","shopID","selectedshop","preventDefault","Grid","container","spacing","xs","sm","TextField","required","fullWidth","autoComplete","onChange","target","labelledBy","Button","type","GET_ITEMS","Groceries","loading","error","dataShops","localStorage","getItem","selectedShop","setSelectedShop","dataItems","setDataItems","paddingTop","Paper","Select","setItem","existingshop","filter","length","MenuItem","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","typeDefs","resolvers","Mutation","addItem","_root","cache","newItems","itemToAdd","find","console","log","utils_addItems","readQuery","query","writeQuery","httpLink","createHttpLink","uri","InMemoryCache","client","ApolloClient","link","res","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.092eee3b.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemSecondaryAction,\r\n  ListItemText,\r\n  Checkbox,\r\n  IconButton,\r\n} from \"@material-ui/core\";\r\nimport gql from \"graphql-tag\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\n\r\nconst DELETE_ITEM = gql`\r\n  mutation deleteItem($_id: String!) {\r\n    deleteItem(_id: $_id) {\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function GroceryItem({ name, id, shop }) {\r\n  const [deleteItem] = useMutation(DELETE_ITEM);\r\n  const [checked, setChecked] = useState([0]);\r\n\r\n  const deletethisitem = () => {\r\n    deleteItem({\r\n      variables: {\r\n        _id: id,\r\n      },\r\n    }).then(() => window.location.reload());\r\n  };\r\n\r\n  const handleToggle = (value) => () => {\r\n    const currentIndex = checked.indexOf(value);\r\n    const newChecked = [...checked];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(value);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n\r\n    setChecked(newChecked);\r\n  };\r\n\r\n  const labelId = `checkbox-list-label-${id}`;\r\n\r\n  return (\r\n    <ListItem key={id} role={undefined} dense button onClick={handleToggle(id)}>\r\n      <ListItemIcon>\r\n        <Checkbox\r\n          edge=\"start\"\r\n          checked={checked.indexOf(id) !== -1}\r\n          tabIndex={-1}\r\n          disableRipple\r\n          inputProps={{ \"aria-labelledby\": labelId }}\r\n          onClick={deletethisitem}\r\n        />\r\n      </ListItemIcon>\r\n      <ListItemText\r\n        style={{ fontWeight: \"bold\", color: \"red\" }}\r\n        id={labelId}\r\n        primary={name}\r\n      />\r\n      {shop\r\n        ? shop.map((shop, key) => {\r\n            return <ListItemText id={key} key={key} primary={shop.name} />;\r\n          })\r\n        : null}\r\n\r\n      <ListItemSecondaryAction>\r\n        <IconButton onClick={deletethisitem} edge=\"end\" aria-label=\"delete\">\r\n          <DeleteIcon />\r\n        </IconButton>\r\n      </ListItemSecondaryAction>\r\n    </ListItem>\r\n  );\r\n}\r\n","import GroceryItem from \"./groceryitem.component\";\r\nimport { Card, Container } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\n\r\nconst GroceryList = ({ items }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <List className={classes.root}>\r\n      <Card variant=\"outlined\">\r\n        <Container>\r\n          {items.map((item) => {\r\n            return <GroceryItem {...item} key={item.id}></GroceryItem>;\r\n          })}\r\n        </Container>\r\n      </Card>\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default GroceryList;\r\n","import React, { useState } from \"react\";\r\nimport MultiSelect from \"react-multi-select-component\";\r\n// import Shops from \"../mock-db/shop\";\r\nimport { Button, Grid, TextField } from \"@material-ui/core\";\r\nimport gql from \"graphql-tag\";\r\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\r\n\r\nconst ADD_ITEM = gql`\r\n  mutation addItem_API($name: String!, $shopID: [String]) {\r\n    addItem_API(name: $name, shopID: $shopID) {\r\n      id\r\n      name\r\n      shop {\r\n        id\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n\r\n\r\nconst GET_SHOPS = gql`\r\n  query getShops {\r\n    shops {\r\n      id\r\n      name\r\n\r\n      item {\r\n        id\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst AddItem = () => {\r\n  const { data } = useQuery(GET_SHOPS);\r\n  const [addItem_API] = useMutation(ADD_ITEM);\r\n  const [newitem, setNewitem] = useState(\"\");\r\n  const [selected, setSelected] = useState([{label: \"Lidl\", value: \"5fce3ca6f4c14e1b0d1cc061\"}]);\r\n\r\n  const handleChange = (event) => {\r\n    setNewitem(event.target.value);\r\n  };\r\n  \r\n  const handleSubmit = (event) => {\r\n    let shoparray = (selecteditems) => {\r\n      return selecteditems.map((selectedshop) => selectedshop.value);\r\n    };\r\n    addItem_API({\r\n      variables: {\r\n        name: newitem,\r\n        shopID: shoparray(selected),\r\n      },\r\n    }).then(()=>window.location.reload());\r\n\r\n    setNewitem(\"\");\r\n    event.preventDefault();\r\n    \r\n  };\r\n  const options = data\r\n    ? data.shops.map((shop) => {\r\n        return { label: shop.name, value: shop.id };\r\n      })\r\n    : { label: \"Loading\", value: \"1\" };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} sm={5}>\r\n            <TextField\r\n              value={newitem}\r\n              required\r\n              id=\"newitem\"\r\n              name=\"newitem\"\r\n              label=\"Add new item\"\r\n              fullWidth\r\n              autoComplete=\"given-name\"\r\n              onChange={handleChange}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={4}>\r\n            <MultiSelect\r\n              options={options}\r\n              value={selected}\r\n              onChange={setSelected}\r\n              labelledBy={\"Select\"}\r\n            />\r\n          </Grid>\r\n\r\n          {/* <pre>{JSON.stringify(selected)}</pre> */}\r\n          <Grid item xs={12} sm={3}>\r\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n              Add item\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddItem;\r\n","import React, { useState } from \"react\";\r\nimport { Paper, Container, Select, MenuItem } from \"@material-ui/core\";\r\nimport GroceryList from \"../components/grocerylist.component\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport gql from \"graphql-tag\";\r\nimport AddItem from \"../components/additem.component\";\r\n\r\nconst GET_ITEMS = gql`\r\n  query getItems {\r\n    items {\r\n      id\r\n      name\r\n      shop {\r\n        id\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_SHOPS = gql`\r\n  query getShops {\r\n    shops {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nconst Groceries = () => {\r\n  const { data, loading, error } = useQuery(GET_ITEMS);\r\n  const getshops = useQuery(GET_SHOPS);\r\n\r\n  const dataShops = getshops.data;\r\n  const [selectedShop, setSelectedShop] = useState(\r\n    localStorage.getItem(\"selectedshop\")\r\n      ? localStorage.getItem(\"selectedshop\")\r\n      : \"\"\r\n  );\r\n\r\n  let [dataItems, setDataItems] = useState();\r\n\r\n  if (loading) return <p>loading...</p>;\r\n  if (error) return <p>ERROR</p>;\r\n  if (!data) return <p>Not found</p>;\r\n\r\n  if (data && !dataItems) {\r\n    setDataItems(data.items);\r\n  }\r\n\r\n  const handleChange = (event) => {\r\n    setSelectedShop(event.target.value);\r\n    localStorage.setItem(\"selectedshop\", event.target.value);\r\n    if (data && event.target.value) {\r\n      let existingshop = null;\r\n      setDataItems(\r\n        data.items.filter((item) => {\r\n          if (item.shop) {\r\n            existingshop = item.shop.filter(\r\n              (shop) => shop.id === event.target.value\r\n            );\r\n          }\r\n          return existingshop.length > 0 ? item : null;\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ paddingTop: \"5%\" }}>\r\n      <Container>\r\n        <Paper>\r\n          <Select\r\n            labelId=\"select-label\"\r\n            id=\"select\"\r\n            value={selectedShop}\r\n            onChange={handleChange}\r\n          >\r\n            {dataShops ? (\r\n              dataShops.shops.map((shop) => (\r\n                <MenuItem key={shop.id} value={shop.id}>\r\n                  {shop.name}\r\n                </MenuItem>\r\n              ))\r\n            ) : (\r\n              <MenuItem value={1}>Loading</MenuItem>\r\n            )}\r\n          </Select>\r\n          <Container>\r\n            <AddItem></AddItem>\r\n            <GroceryList items={dataItems}></GroceryList>\r\n          </Container>\r\n        </Paper>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Groceries;\r\n","//import './App.css';\nimport Groceries from './pages/groceries.page';\n\n\nfunction App() {  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Groceries></Groceries>  \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { gql } from \"apollo-boost\";\r\nimport { utils_addItems } from \"./item.utils\";\r\n\r\n\r\nexport const typeDefs = gql `\r\n    extend type Mutation {\r\n        AddItem(item: Item!): [Item]\r\n    }\r\n`;\r\n\r\nconst GET_ITEMS = gql`\r\n  {\r\n    items @client\r\n  }\r\n`;\r\n\r\nexport const resolvers = {\r\n    Mutation: {     \r\n      addItem: (_root, { item }, { cache }) => {\r\n        const { items } = cache.readQuery({\r\n          query: GET_ITEMS\r\n        });\r\n  \r\n        const newItems = utils_addItems(items, item);\r\n        cache.writeQuery({\r\n          query: GET_ITEMS,\r\n          data: { items: newItems }\r\n        });\r\n  \r\n        return newItems;\r\n      }\r\n    }\r\n  };","export const utils_addItems = (items, itemToAdd) => {    \r\n    const existingItem = items.find(\r\n        item=> item.name === itemToAdd.name\r\n    );\r\n\r\n    if(existingItem){        \r\n        console.log(\"Item is already added\")\r\n        return items;        \r\n    }\r\n    return [...items, itemToAdd];\r\n\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport {ApolloProvider} from 'react-apollo';\r\nimport {createHttpLink} from 'apollo-link-http';\r\nimport {InMemoryCache} from 'apollo-cache-inmemory';\r\nimport {ApolloClient, gql} from 'apollo-boost';\r\n\r\nimport {resolvers, typeDefs} from './graphql/resolvers';\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: 'https://grocery-list-louise.herokuapp.com/graphql'\r\n  \r\n});\r\n\r\nconst cache = new InMemoryCache();\r\n\r\nconst client = new ApolloClient({\r\n  link: httpLink,\r\n  cache, \r\n  typeDefs,\r\n  resolvers\r\n});\r\n\r\n// client.writeData({\r\n//   data: {\r\n//     items: []\r\n//   }\r\n// })\r\nclient.query({\r\n  query: gql`\r\n  {\r\n    \r\n      items\r\n      {\r\n        id\r\n        name    \r\n        shop{\r\n          id\r\n          name      \r\n        }\r\n      }\r\n    \r\n  }\r\n  `\r\n}).then(res => null);\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client = {client}>    \r\n    <App />  \r\n  </ApolloProvider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}